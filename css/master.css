/* Start Work */
* {
  margin: 0; 
  padding: 0; 
  box-sizing: border-box; 
}
body {
  min-height: 100vh; 
  width: 100%;
  background-color: #222; 
  overflow: hidden;
  perspective: var(--perspective);
  margin: 0; 
}
* {
  transform-style: preserve-3d; 
}
input[type="radio"] {
  display: none; 
}
label {
  display: inline-block; 
  padding: .5rem; 
  color: #fff; 
  font-family:  Arial, Helvetica, sans-serif;
  font-size: 1rem; 
  background-color: #0075ff; 
  transition: 0.3s; 
  border-radius: 6px;
  cursor: pointer; 
  position: absolute; 
  top: 5px; 
  z-index: 100; 
}
[for=cam1] {
  left: 10px;
}
[for=cam2] {
  left: calc(82px + 5px)
}
[for=cam3] {
  left: calc(160px + 5px);
}
[for="cam4"] {
  left: calc(238px + 5px)
}
[for="cam1"]:hover, 
[for="cam2"]:hover, 
[for="cam3"]:hover, 
[for="cam4"]:hover {
  background-color: #0056b8;
}
#cam1:checked + [for="cam1"], 
#cam2:checked + [for="cam2"], 
#cam3:checked + [for="cam3"], 
#cam4:checked + [for="cam4"] {
  background-color: #0056b8;
}
#cam1:checked ~ .scene {
  transform: 
  translateZ(var(--perspective))
  
  translateX(calc(var(--camera-truck) * -1))
  translateY(var(--camera-pedestal))
  translateZ(calc(var(--camera-dolly) * -1))
  
  rotateX(var(--camera-roll))
  rotateY(var(--camera-pen))
  rotateZ(var(--camera-tilt))
  
  translateZ(calc(var(--perspective) * -1));
  transition: transform 1s; 
}
#cam2:checked ~ .scene {
  transform: 
  translateZ(var(--perspective))
  
  translateX(0px)
  translateY(300px)
  translateZ(-500px)
  
  rotateX(-25deg)
  rotateY(0deg)
  rotateZ(0deg)
  
  translateZ(calc(var(--perspective) * -1));  
}
#cam3:checked ~ .scene {
  transform: 
  translateZ(var(--perspective))
  
  translateX(500px)
  translateY(-500px)
  translateZ(-500px)
  
  rotateX(30deg)
  rotateY(30deg)
  rotateZ(0deg)
  
  translateZ(calc(var(--perspective) * -1));
}
#cam4:checked ~ .scene {
  transform: 
  translateZ(var(--perspective))
  
  translateX(-500px)
  translateY(-500px)
  translateZ(-500px)
  
  rotateX(30deg)
  rotateY(-30deg)
  rotateZ(0deg)
  
  translateZ(calc(var(--perspective) * -1));
}
.scene {
  display: grid; 
  place-items: center; 
  min-height: 100vh; 
}
:root {
  --perspective: 1000px; 

  --camera-dolly: 0px;
  --camera-pedestal: 0px;
  --camera-truck: 0px;
  --camera-pen: 0deg;
  --camera-tilt: 0deg;
  --camera-roll: 0deg;
}
.scene {
  transform: 
  translateZ(var(--perspective))
  
  translateX(calc(var(--camera-truck) * -1))
  translateY(var(--camera-pedestal))
  translateZ(calc(var(--camera-dolly) * -1))
  
  rotateX(var(--camera-roll))
  rotateY(var(--camera-pen))
  rotateZ(var(--camera-tilt))
  
  translateZ(calc(var(--perspective) * -1));
  transition: transform 1s; 
}
.cube {
  width: 300px; 
  height: 300px; 
  position: relative; 
  /* background-color: blue; */
  animation: rotating 4s linear infinite; 
  transform: rotateX(-30deg);
}
@keyframes rotating {
  to {
    transform: rotateX(-30deg) rotateY(360deg);
  }
}
.cube > div {
  position: absolute; 
  left: 0; 
  top: 0; 
  width: 100%; 
  height: 100%; 
  background-image: linear-gradient(#000, blue);
  opacity: 0.6;
  transform: rotateY(calc(var(--i) * 90deg)) translateZ(150px);
}
.cube :where(.top, .bottom) {
  position: absolute; 
  inset: 0; 
  width: 100%; 
  height: 100%;
  background-color: #000; 
}
.cube .top {
  transform: rotateX(90deg) translateZ(150px); 
  opacity: .8;
}
.cube .bottom {
  transform: rotateX(90deg) translateZ(-222px); 
  filter: blur(31px);
}














